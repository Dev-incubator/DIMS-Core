@model TaskWithMembersViewModel

@{
    ViewData["Title"] = "Task Details #" + Model.TaskId;
}

<h1>Task Details</h1>

<div>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TaskId)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TaskId)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class="col-sm-10">
            @Convert.ToDateTime(item.StartDate).ToString("MM/dd/yyyy")
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DeadlineDate)
        </dt>
        <dd class="col-sm-10">
            @Convert.ToDateTime(item.DeadlineDate).ToString("MM/dd/yyyy")
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Members)
        </dt>
        <dd class="col-sm-10">
            @if (Model.Members is null || !Model.Members.Any())
            {
                <div>-</div>
            }
            else
            {
                @for (var i = 0; i < Model.Members.Count; i++)
                {
                    <div>@Html.DisplayTextFor(model => model.Members[i].FullName)</div>
                }
            }
        </dd>
    </dl>
</div>
<div>
    @Html.ActionLink("Edit", "Edit", new { id = Model.TaskId }) |
    @await Html.PartialAsync("_BackToList", new BackToListViewModel { Controller = "tasks" })
</div>
